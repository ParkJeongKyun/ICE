(function(){"use strict";self.importScripts("/js/ice_yara.js"),self.onmessage=async function(i){const{binaryData:t,inputRule:r}=i.data,o=s=>self.Module._malloc(s),a=s=>self.Module._free(s),m=self.Module.cwrap("scan_with_yara","number",["number","number","string"]),f=self.Module.cwrap("get_matched_rule_names","number",["number"]);try{if(t&&r){const s=o(t.length);self.Module.HEAPU8.set(t,s);const c=m(s,t.length,r);if(c===0){const e=o(4),n=f(e),d=self.Module.getValue(e,"i32"),u=[];for(let l=0;l<d;l++){const g=self.Module.getValue(n+l*4,"i32"),M=self.Module.UTF8ToString(g);u.push(M)}a(s),a(e),a(n),self.postMessage({status:"success",matchedRuleNames:u})}else{let e;switch(c){case 1:e="Failed to initialize YARA.";break;case 2:e="Failed to create YARA compiler.";break;case 3:e="Failed to compile YARA rule.";break;case 4:e="Failed to get compiled YARA rules.";break;case 5:e="Failed to scan binary data with YARA rules.";break;default:e="Unknown error occurred."}a(s),self.postMessage({status:"failure",message:e})}}}catch(s){self.postMessage({status:"failure",message:s.message})}}})();
